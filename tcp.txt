tcpserver.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
int main() {
 int server_socket = socket(AF_INET, SOCK_STREAM, 0);
 if (server_socket == -1) {
 perror("Socket creation failed");
 exit(1);
 }
 struct sockaddr_in server_addr;
 server_addr.sin_family = AF_INET;
 server_addr.sin_port = htons(8080);
 server_addr.sin_addr.s_addr = INADDR_ANY;
 if (bind(server_socket, (struct sockaddr*)&server_addr, sizeof(server_addr)) == -1) {
 perror("Binding failed");
 exit(1);
 }
 if (listen(server_socket, 5) == -1) {
 perror("Listening failed");
 exit(1);
 }
 printf("Server listening on port 8080...\n");
 struct sockaddr_in client_addr;
 int client_socket;
 socklen_t client_addr_len = sizeof(client_addr);
 client_socket = accept(server_socket, (struct sockaddr*)&client_addr, &client_addr_len);
 if (client_socket == -1) {
 perror("Accepting client connection failed");
 exit(1);
 }
 printf("Client connected\n");
 char buffer[1024];
 while (1) {
 recv(client_socket, buffer, sizeof(buffer), 0);
 printf("Client: %s\n", buffer);
 printf("Server: ");
 fgets(buffer, sizeof(buffer), stdin);
 send(client_socket, buffer, strlen(buffer), 0);
 }
 close(client_socket);
 close(server_socket);
 return 0;
}
tcpclient.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
int main() {
 int client_socket = socket(AF_INET, SOCK_STREAM, 0);
 if (client_socket == -1) {
 perror("Socket creation failed");
 exit(1);
 }
 struct sockaddr_in server_addr;
 server_addr.sin_family = AF_INET;
 server_addr.sin_port = htons(8080);
 server_addr.sin_addr.s_addr = inet_addr("127.0.0.1");
 if (connect(client_socket, (struct sockaddr*)&server_addr, sizeof(server_addr)) == -1) {
 perror("Connection to server failed");
 exit(1);
 }
 printf("Connected to server\n");
 char buffer[1024];
 while (1) {
 printf("Client: ");
 fgets(buffer, sizeof(buffer), stdin);
 send(client_socket, buffer, strlen(buffer), 0);
 recv(client_socket, buffer, sizeof(buffer), 0);
 printf("Server: %s\n", buffer);
 }
 close(client_socket);
 return 0;
}